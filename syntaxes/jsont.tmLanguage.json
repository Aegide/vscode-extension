{
    "information_for_contributors": [
        "https://github.com/eclipse/buildship/blob/master/org.eclipse.buildship.kotlindsl.provider/kotlin.tmLanguage.json"
    ],
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "JSONT",
    "scopeName": "source.jsont",
    "patterns": [
        {
            "include": "#import"
        },
        {
            "include": "#package"
        },
        {
            "include": "#code"
        }
    ],
    "fileTypes": [
        "jsont"
    ],
    "repository": {
        "import": {
            "begin": "\\b(import)\\b\\s?([\\w+.]*\\w+)?\\s*",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.import.jsont"
                },
                "2": {
                    "name": "storage.modifier.import.jsont"
                }
            },
            "end": ";|$",
            "name": "meta.import.jsont",
            "contentName": "entity.name.package.jsont",
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#hard-keywords"
                },
                {
                    "match": "\\*",
                    "name": "variable.language.wildcard.jsont"
                }
            ]
        },
        "package": {
            "begin": "\\b(package)\\b\\s*",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.package.jsont"
                }
            },
            "end": ";|$",
            "name": "meta.package.jsont",
            "contentName": "entity.name.package.jsont",
            "patterns": [
                {
                    "include": "#comments"
                }
            ]
        },
        "code": {
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#keywords"
                },
                {
                    "include": "#annotation-simple"
                },
                {
                    "include": "#annotation-site-list"
                },
                {
                    "include": "#annotation-site"
                },
                {
                    "include": "#class-declaration"
                },
                {
                    "include": "#object-declaration"
                },
                {
                    "include": "#type-alias"
                },
                {
                    "include": "#function-declaration"
                },
                {
                    "include": "#variable-declaration"
                },
                {
                    "include": "#constant-declaration"
                },
                {
                    "include": "#variable"
                },
                {
                    "include": "#object"
                },
                {
                    "include": "#type-constraint"
                },
                {
                    "include": "#type-annotation"
                },
                {
                    "include": "#function-call"
                },
                {
                    "include": "#property.reference"
                },
                {
                    "include": "#method-reference"
                },
                {
                    "include": "#key"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#string-empty"
                },
                {
                    "include": "#string-multiline"
                },
                {
                    "include": "#character"
                },
                {
                    "include": "#lambda-arrow"
                },
                {
                    "include": "#operators"
                },
                {
                    "include": "#self-reference"
                },
                {
                    "include": "#decimal-literal"
                },
                {
                    "include": "#hex-literal"
                },
                {
                    "include": "#binary-literal"
                },
                {
                    "include": "#boolean-literal"
                },
                {
                    "include": "#null-literal"
                },
                {
                    "match": ",",
                    "name": "punctuation.separator.delimiter.jsont"
                },
                {
                    "match": "\\.",
                    "name": "punctuation.separator.period.jsont"
                },
                {
                    "match": "\\?\\.",
                    "name": "punctuation.accessor.optional.jsont"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "include": "#comment-line"
                },
                {
                    "include": "#comment-block"
                },
                {
                    "include": "#comment-javadoc"
                }
            ]
        },
        "comment-line": {
            "begin": "//",
            "end": "$",
            "name": "comment.line.double-slash.jsont"
        },
        "comment-block": {
            "begin": "/\\*(?!\\*)",
            "end": "\\*/",
            "name": "comment.block.jsont"
        },
        "comment-javadoc": {
            "patterns": [
                {
                    "begin": "/\\*\\*",
                    "end": "\\*/",
                    "name": "comment.block.javadoc.jsont",
                    "patterns": [
                        {
                            "match": "@(author|deprecated|return|see|serial|since|version)\\b",
                            "name": "keyword.other.documentation.javadoc.jsont"
                        },
                        {
                            "match": "(@param)\\s+(\\S+)",
                            "captures": {
                                "1": {
                                    "name": "keyword.other.documentation.javadoc.jsont"
                                },
                                "2": {
                                    "name": "variable.parameter.jsont"
                                }
                            }
                        },
                        {
                            "match": "(@(?:exception|throws))\\s+(\\S+)",
                            "captures": {
                                "1": {
                                    "name": "keyword.other.documentation.javadoc.jsont"
                                },
                                "2": {
                                    "name": "entity.name.type.class.jsont"
                                }
                            }
                        },
                        {
                            "match": "{(@link)\\s+(\\S+)?#([\\w$]+\\s*\\([^\\(\\)]*\\)).*}",
                            "captures": {
                                "1": {
                                    "name": "keyword.other.documentation.javadoc.jsont"
                                },
                                "2": {
                                    "name": "entity.name.type.class.jsont"
                                },
                                "3": {
                                    "name": "variable.parameter.jsont"
                                }
                            }
                        }
                    ]
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "include": "#prefix-modifiers"
                },
                {
                    "include": "#postfix-modifiers"
                },
                {
                    "include": "#soft-keywords"
                },
                {
                    "include": "#hard-keywords"
                },
                {
                    "include": "#control-keywords"
                },
                {
                    "include": "#map-keywords"
                }
            ]
        },
        "prefix-modifiers": {
            "match": "\\b(abstract|final|enum|open|annotation|sealed|data|override|final|lateinit|private|protected|public|internal|inner|companion|noinline|crossinline|vararg|reified|tailrec|operator|infix|inline|external|const|suspend|value)\\b",
            "name": "storage.modifier.other.jsont"
        },
        "postfix-modifiers": {
            "match": "\\b(where|by|get|set)\\b",
            "name": "storage.modifier.other.jsont"
        },
        "soft-keywords": {
            "match": "\\b(catch|finally|field)\\b",
            "name": "keyword.soft.jsont"
        },
        "hard-keywords": {
            "match": "\\b(as|typeof|is|in)\\b",
            "name": "keyword.hard.jsont"
        },
        "control-keywords": {
            "match": "\\b(if|else|while|do|when|try|throw|break|continue|return|for)\\b",
            "name": "keyword.control.jsont"
        },
        "map-keywords": {
            "match": "\\b(to)\\b",
            "name": "keyword.map.jsont"
        },
        "annotation-simple": {
            "match": "(?<!\\w)@[\\w\\.]+\\b(?!:)",
            "name": "entity.name.type.annotation.jsont"
        },
        "annotation-site-list": {
            "begin": "(?<!\\w)(@\\w+):\\s*\\[",
            "end": "\\]",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.type.annotation-site.jsont"
                }
            },
            "patterns": [
                {
                    "include": "#unescaped-annotation"
                }
            ]
        },
        "annotation-site": {
            "begin": "(?<!\\w)(@\\w+):\\s*(?!\\[)",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.type.annotation-site.jsont"
                }
            },
            "patterns": [
                {
                    "include": "#unescaped-annotation"
                }
            ]
        },
        "unescaped-annotation": {
            "match": "\\b[\\w\\.]+\\b",
            "name": "entity.name.type.annotation.jsont"
        },
        "class-declaration": {
            "match": "\\b(class|interface)\\s+(\\b\\w+\\b|`[^`]+`)\\s*(?<GROUP><([^<>]|\\g<GROUP>)+>)?",
            "captures": {
                "1": {
                    "name": "storage.type.class.jsont"
                },
                "2": {
                    "name": "entity.name.type.class.jsont"
                },
                "3": {
                    "patterns": [
                        {
                            "include": "#type-parameter"
                        }
                    ]
                }
            }
        },
        "object-declaration": {
            "match": "\\b(object)\\s+(\\b\\w+\\b|`[^`]+`)",
            "captures": {
                "1": {
                    "name": "storage.type.object.jsont"
                },
                "2": {
                    "name": "entity.name.type.object.jsont"
                }
            }
        },
        "type-alias": {
            "match": "\\b(typealias)\\s+(\\b\\w+\\b|`[^`]+`)\\s*(?<GROUP><([^<>]|\\g<GROUP>)+>)?",
            "captures": {
                "1": {
                    "name": "storage.type.alias.jsont"
                },
                "2": {
                    "name": "entity.name.type.jsont"
                },
                "3": {
                    "patterns": [
                        {
                            "include": "#type-parameter"
                        }
                    ]
                }
            }
        },
        "function-declaration": {
            "begin": "\\b(fun)\\b\\s*(?<GROUP><([^<>]|\\g<GROUP>)+>)?\\s*(?:(\\w+)\\.)?(\\b\\w+\\b|`[^`]+`)\\(",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.function.jsont"
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#type-parameter"
                        }
                    ]
                },
                "4": {
                    "name": "entity.name.type.class.extension.jsont"
                },
                "5": {
                    "name": "entity.name.function.declaration.jsont"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "1": {
                    "name": "keyword.operator.assignment.type.jsont"
                }
            },
            "patterns": [
                {
                    "include":  "#parameter-declaration"
                }
            ]
        },
        "parameter-declaration": {
            "match": "\\b(\\w+)\\s*(:)\\s*(\\w+)(\\?)?(,)?",
            "captures": {
                "1": {
                    "name": "variable.parameter.jsont"
                },
                "2": {
                    "name": "keyword.operator.assignment.type.jsont"
                },
                "3": {
                    "name": "entity.name.type.jsont"
                },
                "4": {
                    "name": "keyword.operator.optional"
                },
                "5": {
                    "name": "punctuation.separator.delimiter.jsont"
                }
            }
        },
        "variable-declaration": {
            "match": "\\b(var)\\b\\s*(?<GROUP><([^<>]|\\g<GROUP>)+>)?",
            "captures": {
                "1": {
                    "name": "storage.type.variable.jsont"
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#type-parameter"
                        }
                    ]
                }
            }
        },
        "constant-declaration": {
            "match": "\\b(val)\\b\\s*(?<GROUP><([^<>]|\\g<GROUP>)+>)?",
            "captures": {
                "1": {
                    "name": "storage.type.variable.readonly.jsont"
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#type-parameter"
                        }
                    ]
                }
            }
        },
        "variable" : {
            "match": "\\b(\\w+)(?=\\s*[:=])",
            "captures": {
                "1": {
                    "name": "variable.other.definition.jsont"
                }
            }
        },
        "object" : {
            "match": "\\b(\\w+)(?=\\.)",
            "captures": {
                "1": {
                    "name": "variable.other.object.jsont"
                }
            }
        },
        "type-parameter": {
            "patterns": [
                {
                    "match": "(:)?\\s*(\\b\\w+\\b)(\\?)?",
                    "captures": {
                        "1": {
                            "name": "keyword.operator.assignment.jsont"
                        },
                        "2": {
                            "name": "entity.name.type.jsont"
                        },
                        "3": {
                            "name": "keyword.operator.optional"
                        }
                    }
                },
                {
                    "match": "\\b(in|out)\\b",
                    "name": "storage.modifier.jsont"
                }
            ]
        },
        "type-annotation": {
            "match": "(?<![:?]):\\s*(\\w|\\?|\\s|->|(?<GROUP>[<(]([^<>()\"']|\\g<GROUP>)+[)>]))+",
            "captures": {
                "0": {
                    "patterns": [
                        {
                            "include": "#type-parameter"
                        }
                    ]
                }
            }
        },
        "function-call": {
            "match": "(?:(\\?\\.)|(\\.))?(\\b\\w+\\b|`[^`]+`)\\s*(?<GROUP><([^<>]|\\g<GROUP>)+>)?\\s*(?=[({])",
            "captures": {
                "1": {
                    "name": "punctuation.accessor.optional.jsont"
                },
                "2": {
                    "name": "punctuation.separator.period.jsont"
                },
                "3": {
                    "name": "entity.name.function.call.jsont"
                },
                "4": {
                    "patterns": [
                        {
                            "include": "#type-parameter"
                        }
                    ]
                }
            }
        },
        "property.reference": {
            "match": "(?:(\\?\\.)|(\\.))(\\w+)\\b",
            "captures": {
                "1": {
                    "name": "punctuation.accessor.optional.jsont"
                },
                "2": {
                    "name": "punctuation.separator.period.jsont"
                },
                "3": {
                    "name": "variable.other.property.jsont"
                }
            }
        },
        "method-reference": {
            "match": "\\??::(\\b\\w+\\b|`[^`]+`)",
            "captures": {
                "1": {
                    "name": "entity.name.function.reference.jsont"
                }
            }
        },
        "key": {
            "match": "\\b(\\w=)\\s*(=)",
            "captures": {
                "1": {
                    "name": "variable.parameter.jsont"
                },
                "2": {
                    "name": "keyword.operator.assignment.jsont"
                }
            }
        },
        "string-empty": {
            "match": "(?<!\")\"\"(?!\")",
            "name": "string.quoted.double.jsont"
        },
        "string": {
            "begin": "(?<!\")\"(?!\")",
            "end": "\"",
            "name": "string.quoted.double.jsont",
            "patterns": [
                {
                    "match": "\\\\.",
                    "name": "constant.character.escape.jsont"
                },
                {
                    "include": "#string-escape-simple"
                },
                {
                    "include": "#string-escape-bracketed"
                }
            ]
        },
        "string-multiline": {
            "begin": "\"\"\"",
            "end": "\"\"\"",
            "name": "string.quoted.double.jsont",
            "patterns": [
                {
                    "match": "\\\\.",
                    "name": "constant.character.escape.jsont"
                },
                {
                    "include": "#string-escape-simple"
                },
                {
                    "include": "#string-escape-bracketed"
                }
            ]
        },
        "string-escape-simple": {
            "match": "(?<!\\\\)\\$\\w+\\b",
            "name": "variable.string-escape.jsont"
        },
        "string-escape-bracketed": {
            "begin": "(?<!\\\\)(\\$\\{)",
            "end": "(\\})",
            "name": "meta.template.expression.jsont",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.template-expression.begin"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.template-expression.end"
                }
            },
            "patterns": [
                {
                    "include": "#code"
                }
            ]
        },
        "character": {
            "begin": "'",
            "end": "'",
            "name": "string.quoted.single.jsont",
            "patterns": [
                {
                    "match": "\\\\.",
                    "name": "constant.character.escape.jsont"
                }
            ]
        },
        "decimal-literal": {
            "match": "\\b\\d[\\d_]*(\\.[\\d_]+)?((e|E)\\d+)?(u|U)?(L|F|f)?\\b",
            "name": "constant.numeric.decimal.jsont"
        },
        "hex-literal": {
            "match": "0(x|X)[A-Fa-f0-9][A-Fa-f0-9_]*(u|U)?",
            "name": "constant.numeric.hex.jsont"
        },
        "binary-literal": {
            "match": "0(b|B)[01][01_]*",
            "name": "constant.numeric.binary.jsont"
        },
        "boolean-literal": {
            "match": "\\b(true|false)\\b",
            "name": "constant.language.boolean.jsont"
        },
        "null-literal": {
            "match": "\\bnull\\b",
            "name": "constant.language.null.jsont"
        },
        "lambda-arrow": {
            "match": "->",
            "name": "storage.type.function.arrow.jsont"
        },
        "operators": {
            "patterns": [
                {
                    "match": "(===?|\\!==?|<=|>=|<|>)",
                    "name": "keyword.operator.comparison.jsont"
                },
                {
                    "match": "(\\?:)",
                    "name": "keyword.operator.elvis.jsont"
                },
                {
                    "match": "([+*/%-]=)",
                    "name": "keyword.operator.assignment.arithmetic.jsont"
                },
                {
                    "match": "(=)",
                    "name": "keyword.operator.assignment.jsont"
                },
                {
                    "match": "([+*/%-])",
                    "name": "keyword.operator.arithmetic.jsont"
                },
                {
                    "match": "(!|&&|\\|\\|)",
                    "name": "keyword.operator.logical.jsont"
                },
                {
                    "match": "(--|\\+\\+)",
                    "name": "keyword.operator.increment-decrement.jsont"
                },
                {
                    "match": "(\\.\\.)",
                    "name": "keyword.operator.range.jsont"
                }
            ]
        },
        "self-reference": {
            "match": "\\b(this|super)(@\\w+)?\\b",
            "name": "variable.language.this.jsont"
        }
    }
}
